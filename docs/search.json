[
  {
    "objectID": "index.html#section-2",
    "href": "index.html#section-2",
    "title": "LQCD @ PASC23",
    "section": "",
    "text": "Magnetic Moment of the Muon\n\na_{\\mu} = \\frac{(g_{\\mu} - 2)}{2}\n\nCan Lattice QCD resolve this?\nnew physics??\n\n\n\n\\left(\\delta a_{\\mu}\\right)^{\\mathrm{exp}}_{\\mathrm{th}} = 5.02 \\times 10^{-9}"
  },
  {
    "objectID": "index.html#fermilab-muon-g-2",
    "href": "index.html#fermilab-muon-g-2",
    "title": "LQCD @ PASC23",
    "section": "Fermilab: Muon g-2",
    "text": "Fermilab: Muon g-2\n\nThe RingIn TransitArrival"
  },
  {
    "objectID": "index.html#python",
    "href": "index.html#python",
    "title": "LQCD @ PASC23",
    "section": "Python",
    "text": "Python\n\n\nCode\nimport numpy as np\nx = np.random.rand()\nprint(x)\n\n\n0.25612748519935635\n\n\n\nSpeaker notes go here."
  },
  {
    "objectID": "index.html#columns",
    "href": "index.html#columns",
    "title": "LQCD @ PASC23",
    "section": "Columns",
    "text": "Columns\n\n\nLeft column\n\nRight column"
  },
  {
    "objectID": "index.html#python-1",
    "href": "index.html#python-1",
    "title": "LQCD @ PASC23",
    "section": "Python",
    "text": "Python\nFor a demonstration of a line plot on a polar axis, see Figure 1\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rcParams.update({\n    'axes.facecolor': 'none',\n    'figure.facecolor': 'none',\n    'savefig.facecolor': 'none',\n    'savefig.format': 'svg',\n    'axes.edgecolor': 'none',\n    'axes.grid': True,\n    'axes.labelcolor': '#666',\n    'axes.titlecolor': '#666',\n    'grid.color': '#666',\n    'text.color': '#666',\n    'grid.linestyle': '--',\n    'grid.linewidth': 0.5,\n    'grid.alpha': 0.4,\n    'xtick.color': 'none',\n    'ytick.color': 'none',\n    'xtick.labelcolor': '#666',\n    'legend.edgecolor': 'none',\n    'ytick.labelcolor': '#666',\n    'savefig.transparent': True,\n})\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfix, ax = plt.subplots(\n    subplot_kw = {'projection': 'polar'}\n)\nassert isinstance(ax, plt.PolarAxes)\nax.plot(theta, r)\nax.set_rticks([0.5, 1., 1.5, 2.])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "index.html#python-1-output",
    "href": "index.html#python-1-output",
    "title": "LQCD @ PASC23",
    "section": "Python",
    "text": "Python\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "index.html#figures-with-subcaptions",
    "href": "index.html#figures-with-subcaptions",
    "title": "LQCD @ PASC23",
    "section": "Figures with Subcaptions",
    "text": "Figures with Subcaptions\n\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n\nplt.plot([8,65,23,90])\nplt.show()\n\n\n\n\n\n\n\n(a) First\n\n\n\n\n\n\n\n(b) Second\n\n\n\n\nFigure 2: Charts"
  },
  {
    "objectID": "index.html#mermaid-diagrams",
    "href": "index.html#mermaid-diagrams",
    "title": "LQCD @ PASC23",
    "section": "Mermaid Diagrams",
    "text": "Mermaid Diagrams\n\n\n\n\nflowchart TB\n  A --&gt; C\n  A --&gt; D\n  B --&gt; C\n  B --&gt; D"
  },
  {
    "objectID": "index.html#mermaid-example",
    "href": "index.html#mermaid-example",
    "title": "LQCD @ PASC23",
    "section": "Mermaid Example",
    "text": "Mermaid Example\n\n\n\n\nflowchart LR\n  markdown[\"`This **is** _Markdown_`\"]\n  newLines[\"`Line1\n  Line 2\n  Line 3`\"]\n  markdown --&gt; newLines"
  },
  {
    "objectID": "index.html#model-parallel-training-example",
    "href": "index.html#model-parallel-training-example",
    "title": "LQCD @ PASC23",
    "section": "Model Parallel Training: Example",
    "text": "Model Parallel Training: Example\ny = w_0 * x_0 + w_1 * x_1 + w_2 * x_2\n\nCompute y_{0} = w_{0} * x_{0} and send to \\longrightarrow GPU1\nCompute y_{1} = y_{0} + w_{1} * x_{1} and send to \\longrightarrow GPU2\nCompute y = y_{1} * w_{2} * x_{2} ✅\n\n\n\n\n\n%%{init: { \"theme\": \"dark\", \"fontFamily\": \"monospace\", \"logLevel\": \"debug\", \"deterministicIds\": true, \"flowchart\": { \"htmlLabels\": true}, \"sequence\": { \"mirrorActors\": true } } }%%\nflowchart LR\n  subgraph X0[\"GPU0\"]\n    direction LR\n    a[\"w0\"]\n  end\n  subgraph X1[\"GPU1\"]\n    direction LR\n    b[\"w1\"]\n  end\n  subgraph X2[\"GPU2\"]\n    direction LR\n    c[\"w2\"]\n  end\n  X1 & X0 &lt;--&gt; X2\n  X0 &lt;--&gt; X1\n  x[\"x0, x1, x2\"] --&gt; X0"
  },
  {
    "objectID": "index.html#block-layout",
    "href": "index.html#block-layout",
    "title": "LQCD @ PASC23",
    "section": "Block Layout",
    "text": "Block Layout\n\n\n\nList One\n\nItem A\nItem B\nItem C\n\n\n\nList Two\n\nItem X\nItem Y\nItem Z"
  },
  {
    "objectID": "index.html#placing-colorbars",
    "href": "index.html#placing-colorbars",
    "title": "LQCD @ PASC23",
    "section": "Placing Colorbars",
    "text": "Placing Colorbars\nColorbars indicate the quantitative extent of image data. Placing in a figure is non-trivial because room needs to be made for them. The simplest case is just attaching a colorbar to each axes:\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, axs = plt.subplots(2, 2)\nassert isinstance(fig, plt.Figure)\ncmaps = ['RdBu_r', 'viridis']\nfor col in range(2):\n    for row in range(2):\n        ax = axs[row, col]\n        pcm = ax.pcolormesh(\n          np.random.random((20, 20)) * (col + 1),\n          cmap=cmaps[col]\n        )\n        fig.colorbar(pcm, ax=ax)\nax.grid(False)\nplt.show()"
  },
  {
    "objectID": "index.html#placing-colorbars-output",
    "href": "index.html#placing-colorbars-output",
    "title": "LQCD @ PASC23",
    "section": "Placing Colorbars",
    "text": "Placing Colorbars\n\n\n\n\nFigure 3: ?(caption)"
  },
  {
    "objectID": "index.html#testing-callouts",
    "href": "index.html#testing-callouts",
    "title": "LQCD @ PASC23",
    "section": "Testing Callouts",
    "text": "Testing Callouts\n\n\n\n\n\n\nNote\n\n\nTesting note callouts with default appearance, no Icon\n\n\n\n\n\n\n\n\n\nTip\n\n\nTesting tip callout with default appearance, no icon\n\n\n\n\n\n\n\n\n\nWarning\n\n\nTesting warning callout with default appearance, no icon\n\n\n\n\n\n\n\n\n\nImportant\n\n\nTesting important callout with default appearance, no icon\n\n\n\n\nTesting lists\nTesting\n\nTesting\nTesting again\n\ntriple Checkboxes\n\nNested lists\n\nTODOs\nCheckboxes ??"
  },
  {
    "objectID": "index.html#extras-other-callouts",
    "href": "index.html#extras-other-callouts",
    "title": "LQCD @ PASC23",
    "section": "Extras (+ other callouts)",
    "text": "Extras (+ other callouts)\n\n\nDefault\n\nNote that there are six types of callouts, including: default, primary, success, info, and warning, and danger\n\n\n\nPrimary\n\n\n\n\nInfo\n\n\n\n\nSuccess\n\n\n\n\nWarning!\n\n\n\n\nDanger!"
  }
]